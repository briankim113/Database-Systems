package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    
    private JoinPredicate joinPred;
    private OpIterator c1;
    private OpIterator c2;
    private Tuple leftTuple; //for join

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        joinPred = p;
        c1 = child1;
        c2 = child2;
        leftTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return joinPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    		return c1.getTupleDesc().getFieldName(joinPred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return c2.getTupleDesc().getFieldName(joinPred.getField1());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(c1.getTupleDesc(), c2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        c1.open();
        c2.open();
    }

    public void close() {
        super.close();
        c1.close();
        c2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        c1.rewind();
        c2.rewind();
        leftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    //we will start from a left tuple, go over all right tuples, see matching fields and join
    //once reached the end of right tuples, rewind the right tuples, go to next left tuple
    //do until left tuples not finished
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (leftTuple == null && c1.hasNext()) {
            leftTuple = c1.next();
        }
        while (leftTuple != null) {
            while (c2.hasNext()) {
                Tuple rightTuple = c2.next();
                if (joinPred.filter(leftTuple, rightTuple)) {
                	return joinTuples(leftTuple, rightTuple);
                    //return Tuple.merge(leftTuple, rightTuple);
                }
            }
            //if right tuples don't have next i.e. reached the end
            if (this.c1.hasNext()) { //go to next tuple on the left side
                leftTuple = c1.next();
                c2.rewind(); //start from beginning for right tuples
            } else { //reached the end of left tuples
                leftTuple = null;
            }
        }
        return null;
    }
    
    private Tuple joinTuples(Tuple _leftTuple, Tuple _rightTuple)
    {
		int leftTupleSize = _leftTuple.getTupleDesc().numFields();
		int rightTupleSize = _rightTuple.getTupleDesc().numFields();
		Tuple joinedTuple = new Tuple(this.getTupleDesc());
		for (int i = 0; i < leftTupleSize; i++)
		{
			joinedTuple.setField(i, _leftTuple.getField(i));
		}
		for (int i = 0; i < rightTupleSize; i++)
		{
			joinedTuple.setField(leftTupleSize + i, _rightTuple.getField(i));
		}
		return joinedTuple;
		
		//this does not delete the repeated column. That can be done through projection
    }

    @Override
    public OpIterator[] getChildren() {
    	return new OpIterator[]{c1, c2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	if (children.length >= 2) {
	    	if(c1 != children[0]) {
	            c1 = children[0];
	        }
	        if (c2 != children[1]) {
	            c2 = children[1];
	        }
    	}
    }

}

